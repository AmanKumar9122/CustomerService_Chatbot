{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOmGo9zHpmkprWCiIA5kWnW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AmanKumar9122/CustomerService_Chatbot/blob/main/CustomerService_ChatBot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EwaGUbYecJck",
        "outputId": "f8d956ed-92b1-41d3-b04c-72c25dad3433"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initializing Customer Service Chatbot...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cpu\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model loaded from chatbot_model.pkl\n",
            "\n",
            "============================================================\n",
            "CUSTOMER SERVICE CHATBOT - Ready to help!\n",
            "Developed by: Aman Kumar (22SCSE1010701), Aditya Bajaj (22SCSE1180157),\n",
            "              Adarsh Singh (22SCSE1010088), Aman Sirohi (22SCSE1012745)\n",
            "Type 'quit' to exit\n",
            "============================================================\n",
            "\n",
            "You: Hi, I need help tracking my order #ORD123456\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Bot: I understand your frustration. To check your order status, I'll need your order ID. It usually starts with #ORD. I see you're referring to order #ORD123456. If you'd like, I can connect you with a human representative for further assistance.\n",
            "[Debug] Intent: order_inquiry (confidence: 0.61)\n",
            "[Debug] Sentiment: negative (0.96)\n",
            "[Debug] Entities: {'order_number': '#ORD123456'}\n",
            "\n",
            "You: \"Can you help me reset my password?\"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Bot: I understand your frustration. What specific account problem are you experiencing? If you'd like, I can connect you with a human representative for further assistance.\n",
            "[Debug] Intent: account_issue (confidence: 0.90)\n",
            "[Debug] Sentiment: negative (1.00)\n",
            "\n",
            "You: I want to return this item\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Bot: I'm happy to help! I'll help you process a return. What item would you like to return?\n",
            "[Debug] Intent: return_request (confidence: 0.97)\n",
            "[Debug] Sentiment: positive (0.99)\n",
            "\n",
            "You: Question about my bill\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bot: I understand your frustration. For billing support, I can explain charges or help update payment methods. If you'd like, I can connect you with a human representative for further assistance.\n",
            "[Debug] Intent: billing_inquiry (confidence: 0.68)\n",
            "[Debug] Sentiment: negative (0.98)\n"
          ]
        }
      ],
      "source": [
        "# Customer Service Chatbot Implementation\n",
        "# Developed by: Aman Kumar (22SCSE1010701), Aditya Bajaj (22SCSE1180157),\n",
        "#              Adarsh Singh (22SCSE1010088), and Aman Sirohi (22SCSE1012745)\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import nltk\n",
        "import pickle\n",
        "import json\n",
        "import re\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\n",
        "import torch\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# NLTK Data Download Section\n",
        "# Author: Aman Kumar (22SCSE1010701)\n",
        "nltk.download('punkt', quiet=True)\n",
        "nltk.download('stopwords', quiet=True)\n",
        "nltk.download('wordnet', quiet=True)\n",
        "\n",
        "class CustomerServiceChatbot:\n",
        "    # Class Initialization Section\n",
        "    # Author: Aditya Bajaj (22SCSE1180157)\n",
        "    def __init__(self):\n",
        "        self.vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')\n",
        "        self.intent_classifier = None\n",
        "        self.entity_extractor = None\n",
        "        self.label_encoder = LabelEncoder()\n",
        "        self.lemmatizer = WordNetLemmatizer()\n",
        "        self.stop_words = set(stopwords.words('english'))\n",
        "\n",
        "        # Initialize sentiment analyzer\n",
        "        self.sentiment_analyzer = pipeline(\"sentiment-analysis\",\n",
        "                                         model=\"distilbert-base-uncased-finetuned-sst-2-english\")\n",
        "\n",
        "        # Response Templates Section\n",
        "        # Author: Aman Kumar (22SCSE1010701)\n",
        "        self.response_templates = {\n",
        "            'order_inquiry': [\n",
        "                \"I can help you track your order. Please provide your order number.\",\n",
        "                \"To check your order status, I'll need your order ID. It usually starts with #ORD.\",\n",
        "                \"Let me help you with order tracking. What's your order number?\"\n",
        "            ],\n",
        "            'return_request': [\n",
        "                \"I can assist with returns. Most items can be returned within 30 days.\",\n",
        "                \"I'll help you process a return. What item would you like to return?\",\n",
        "                \"For returns, I need some details about your purchase. Can you provide the order number?\"\n",
        "            ],\n",
        "            'account_issue': [\n",
        "                \"I can help with account problems. Are you having trouble logging in?\",\n",
        "                \"For account issues, I can assist with password resets or profile updates.\",\n",
        "                \"What specific account problem are you experiencing?\"\n",
        "            ],\n",
        "            'billing_inquiry': [\n",
        "                \"I can help with billing questions. Are you seeing an unexpected charge?\",\n",
        "                \"For billing support, I can explain charges or help update payment methods.\",\n",
        "                \"What billing issue can I help you resolve?\"\n",
        "            ],\n",
        "            'technical_support': [\n",
        "                \"I'm here to help with technical issues. Can you describe the problem?\",\n",
        "                \"For technical support, please provide details about what's not working.\",\n",
        "                \"Let me help troubleshoot this technical issue. What seems to be wrong?\"\n",
        "            ],\n",
        "            'complaint': [\n",
        "                \"I'm sorry to hear about your concern. Let me help resolve this issue.\",\n",
        "                \"I understand your frustration. Can you provide more details about the problem?\",\n",
        "                \"I apologize for the inconvenience. How can I make this right for you?\"\n",
        "            ],\n",
        "            'greeting': [\n",
        "                \"Hello! How can I assist you today?\",\n",
        "                \"Hi there! I'm here to help with any questions you have.\",\n",
        "                \"Welcome! What can I help you with?\"\n",
        "            ],\n",
        "            'general': [\n",
        "                \"I can help with orders, returns, account issues, and general questions.\",\n",
        "                \"I'm here to assist! What do you need help with today?\",\n",
        "                \"How can I help you today?\"\n",
        "            ]\n",
        "        }\n",
        "\n",
        "    # Training Dataset Creation Section\n",
        "    # Author: Aditya Bajaj (22SCSE1180157)\n",
        "    def create_training_dataset(self):\n",
        "        \"\"\"Create a comprehensive training dataset for the chatbot\"\"\"\n",
        "\n",
        "        # Customer service intents with sample queries\n",
        "        training_data = {\n",
        "            'text': [\n",
        "                # Order inquiries\n",
        "                \"Where is my order?\", \"Track my package\", \"Order status check\",\n",
        "                \"When will my order arrive?\", \"I haven't received my order\",\n",
        "                \"My order is late\", \"Check delivery status\", \"Order tracking number\",\n",
        "                \"Where's my package?\", \"Order not delivered\", \"Shipping update needed\",\n",
        "                \"My order hasn't shipped\", \"Expected delivery date\", \"Package location\",\n",
        "\n",
        "                # Return requests\n",
        "                \"I want to return this item\", \"How do I return a product?\",\n",
        "                \"Return policy information\", \"Exchange this product\", \"Refund request\",\n",
        "                \"Item is defective\", \"Wrong item received\", \"Product damaged\",\n",
        "                \"Return shipping label\", \"Cancel and refund\", \"Product not as described\",\n",
        "                \"Quality issue with product\", \"Return process help\", \"Refund status\",\n",
        "\n",
        "                # Account issues - Author: Aman Kumar (22SCSE1010701)\n",
        "                \"I can't log into my account\", \"Forgot my password\", \"Account locked\",\n",
        "                \"Update my profile\", \"Change email address\", \"Account recovery\",\n",
        "                \"Two-factor authentication help\", \"Login problems\", \"Password reset\",\n",
        "                \"Account verification\", \"Update payment method\", \"Change address\",\n",
        "                \"Account security\", \"Profile settings\", \"Login credentials\",\n",
        "\n",
        "                # Billing inquiries\n",
        "                \"Question about my bill\", \"Unexpected charge on card\", \"Payment failed\",\n",
        "                \"Billing address change\", \"Invoice not received\", \"Payment methods\",\n",
        "                \"Credit card declined\", \"Refund processing time\", \"Billing cycle\",\n",
        "                \"Subscription charges\", \"Tax questions\", \"Payment confirmation\",\n",
        "                \"Billing support needed\", \"Charge dispute\", \"Payment options\",\n",
        "\n",
        "                # Technical support - Author: Aditya Bajaj (22SCSE1180157)\n",
        "                \"Website not working\", \"App keeps crashing\", \"Technical problems\",\n",
        "                \"Can't access website\", \"Error message appearing\", \"System down\",\n",
        "                \"Page won't load\", \"Mobile app issues\", \"Browser compatibility\",\n",
        "                \"Connection problems\", \"Feature not working\", \"Bug report\",\n",
        "                \"Performance issues\", \"System error\", \"Technical difficulties\",\n",
        "\n",
        "                # Complaints\n",
        "                \"I'm not satisfied\", \"Poor customer service\", \"Quality complaint\",\n",
        "                \"Disappointed with product\", \"Service was terrible\", \"Unhappy customer\",\n",
        "                \"This is unacceptable\", \"Manager needed\", \"Escalate this issue\",\n",
        "                \"File a complaint\", \"Very frustrated\", \"Extremely disappointed\",\n",
        "                \"Bad experience\", \"Service problem\", \"Quality issues\",\n",
        "\n",
        "                # Greetings - Author: Aman Kumar (22SCSE1010701)\n",
        "                \"Hello\", \"Hi there\", \"Good morning\", \"Hey\", \"Good afternoon\",\n",
        "                \"Good evening\", \"How are you?\", \"Greetings\", \"Hi\",\n",
        "                \"Hello there\", \"Good day\", \"Howdy\", \"What's up\", \"Salutations\",\n",
        "\n",
        "                # General\n",
        "                \"I need help\", \"Can you assist me?\", \"Information needed\",\n",
        "                \"Have a question\", \"Need support\", \"General inquiry\",\n",
        "                \"Help me please\", \"Looking for information\", \"Customer service\",\n",
        "                \"Assistance required\", \"Need guidance\", \"Support needed\"\n",
        "            ],\n",
        "\n",
        "            'intent': [\n",
        "                # Order inquiries (14 samples)\n",
        "                'order_inquiry', 'order_inquiry', 'order_inquiry', 'order_inquiry',\n",
        "                'order_inquiry', 'order_inquiry', 'order_inquiry', 'order_inquiry',\n",
        "                'order_inquiry', 'order_inquiry', 'order_inquiry', 'order_inquiry',\n",
        "                'order_inquiry', 'order_inquiry',\n",
        "\n",
        "                # Return requests (14 samples)\n",
        "                'return_request', 'return_request', 'return_request', 'return_request',\n",
        "                'return_request', 'return_request', 'return_request', 'return_request',\n",
        "                'return_request', 'return_request', 'return_request', 'return_request',\n",
        "                'return_request', 'return_request',\n",
        "\n",
        "                # Account issues (15 samples)\n",
        "                'account_issue', 'account_issue', 'account_issue', 'account_issue',\n",
        "                'account_issue', 'account_issue', 'account_issue', 'account_issue',\n",
        "                'account_issue', 'account_issue', 'account_issue', 'account_issue',\n",
        "                'account_issue', 'account_issue', 'account_issue',\n",
        "\n",
        "                # Billing inquiries (15 samples)\n",
        "                'billing_inquiry', 'billing_inquiry', 'billing_inquiry', 'billing_inquiry',\n",
        "                'billing_inquiry', 'billing_inquiry', 'billing_inquiry', 'billing_inquiry',\n",
        "                'billing_inquiry', 'billing_inquiry', 'billing_inquiry', 'billing_inquiry',\n",
        "                'billing_inquiry', 'billing_inquiry', 'billing_inquiry',\n",
        "\n",
        "                # Technical support (15 samples)\n",
        "                'technical_support', 'technical_support', 'technical_support', 'technical_support',\n",
        "                'technical_support', 'technical_support', 'technical_support', 'technical_support',\n",
        "                'technical_support', 'technical_support', 'technical_support', 'technical_support',\n",
        "                'technical_support', 'technical_support', 'technical_support',\n",
        "\n",
        "                # Complaints (15 samples)\n",
        "                'complaint', 'complaint', 'complaint', 'complaint', 'complaint',\n",
        "                'complaint', 'complaint', 'complaint', 'complaint', 'complaint',\n",
        "                'complaint', 'complaint', 'complaint', 'complaint', 'complaint',\n",
        "\n",
        "                # Greetings (14 samples)\n",
        "                'greeting', 'greeting', 'greeting', 'greeting', 'greeting',\n",
        "                'greeting', 'greeting', 'greeting', 'greeting', 'greeting',\n",
        "                'greeting', 'greeting', 'greeting', 'greeting',\n",
        "\n",
        "                # General (12 samples)\n",
        "                'general', 'general', 'general', 'general', 'general',\n",
        "                'general', 'general', 'general', 'general', 'general',\n",
        "                'general', 'general'\n",
        "            ]\n",
        "        }\n",
        "\n",
        "        return pd.DataFrame(training_data)\n",
        "\n",
        "    # Text Preprocessing Section\n",
        "    # Author: Aman Kumar (22SCSE1010701)\n",
        "    def preprocess_text(self, text):\n",
        "        \"\"\"Advanced text preprocessing\"\"\"\n",
        "        # Convert to lowercase\n",
        "        text = text.lower()\n",
        "\n",
        "        # Remove special characters and digits\n",
        "        text = re.sub(r'[^a-zA-Z\\s]', '', text)\n",
        "\n",
        "        nltk.download('punkt_tab')\n",
        "\n",
        "        # Tokenize\n",
        "        tokens = word_tokenize(text)\n",
        "\n",
        "        # Remove stopwords and lemmatize\n",
        "        tokens = [self.lemmatizer.lemmatize(token) for token in tokens\n",
        "                 if token not in self.stop_words and len(token) > 2]\n",
        "\n",
        "        return ' '.join(tokens)\n",
        "\n",
        "    # Data Augmentation Section\n",
        "    # Author: Aditya Bajaj (22SCSE1180157)\n",
        "    def augment_dataset(self, df, augmentation_factor=3):\n",
        "        \"\"\"Augment dataset by adding variations\"\"\"\n",
        "        augmented_data = []\n",
        "\n",
        "        # Synonyms for augmentation\n",
        "        synonyms = {\n",
        "            'order': ['purchase', 'transaction', 'item'],\n",
        "            'track': ['check', 'find', 'locate'],\n",
        "            'return': ['send back', 'exchange', 'refund'],\n",
        "            'help': ['assist', 'support', 'aid'],\n",
        "            'problem': ['issue', 'trouble', 'difficulty'],\n",
        "            'account': ['profile', 'user account', 'login']\n",
        "        }\n",
        "\n",
        "        for _, row in df.iterrows():\n",
        "            original_text = row['text']\n",
        "            intent = row['intent']\n",
        "\n",
        "            # Add original\n",
        "            augmented_data.append({'text': original_text, 'intent': intent})\n",
        "\n",
        "            # Create variations\n",
        "            for i in range(augmentation_factor - 1):\n",
        "                modified_text = original_text\n",
        "\n",
        "                # Apply synonym replacement\n",
        "                for word, synonym_list in synonyms.items():\n",
        "                    if word in modified_text.lower():\n",
        "                        synonym = np.random.choice(synonym_list)\n",
        "                        modified_text = modified_text.replace(word, synonym)\n",
        "\n",
        "                # Add variations with different phrasings\n",
        "                if 'my' in modified_text:\n",
        "                    modified_text = modified_text.replace('my', 'the')\n",
        "                elif 'the' in modified_text:\n",
        "                    modified_text = modified_text.replace('the', 'my')\n",
        "\n",
        "                augmented_data.append({'text': modified_text, 'intent': intent})\n",
        "\n",
        "        return pd.DataFrame(augmented_data)\n",
        "\n",
        "    # Model Training Section\n",
        "    # Author: Aman Kumar (22SCSE1010701)\n",
        "    def train_intent_classifier(self, df):\n",
        "        \"\"\"Train multiple models and select the best one\"\"\"\n",
        "\n",
        "        print(\"Preprocessing training data...\")\n",
        "        df['processed_text'] = df['text'].apply(self.preprocess_text)\n",
        "\n",
        "        # Prepare features and labels\n",
        "        X = df['processed_text'].values\n",
        "        y = df['intent'].values\n",
        "\n",
        "        # Encode labels\n",
        "        y_encoded = self.label_encoder.fit_transform(y)\n",
        "\n",
        "        # Vectorize text\n",
        "        X_vectorized = self.vectorizer.fit_transform(X)\n",
        "\n",
        "        # Split data\n",
        "        X_train, X_test, y_train, y_test = train_test_split(\n",
        "            X_vectorized, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded\n",
        "        )\n",
        "\n",
        "        print(\"Training multiple models...\")\n",
        "\n",
        "        # Train multiple models - Authors: Aditya Bajaj (22SCSE1180157) and Adarsh Singh (22SCSE1010088)\n",
        "        models = {\n",
        "            'Naive Bayes': MultinomialNB(alpha=0.1),\n",
        "            'Logistic Regression': LogisticRegression(random_state=42, max_iter=1000),\n",
        "            'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "        }\n",
        "\n",
        "        best_model = None\n",
        "        best_score = 0\n",
        "        best_name = \"\"\n",
        "\n",
        "        for name, model in models.items():\n",
        "            # Cross-validation\n",
        "            cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\n",
        "            mean_score = cv_scores.mean()\n",
        "\n",
        "            print(f\"{name} - CV Accuracy: {mean_score:.4f} (+/- {cv_scores.std() * 2:.4f})\")\n",
        "\n",
        "            if mean_score > best_score:\n",
        "                best_score = mean_score\n",
        "                best_model = model\n",
        "                best_name = name\n",
        "\n",
        "        # Train the best model on full training data\n",
        "        print(f\"\\nSelected best model: {best_name}\")\n",
        "        best_model.fit(X_train, y_train)\n",
        "        self.intent_classifier = best_model\n",
        "\n",
        "        # Evaluate on test set\n",
        "        y_pred = best_model.predict(X_test)\n",
        "        test_accuracy = accuracy_score(y_test, y_pred)\n",
        "        print(f\"Test Accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "        # Detailed classification report\n",
        "        intent_names = self.label_encoder.classes_\n",
        "        print(\"\\nClassification Report:\")\n",
        "        print(classification_report(y_test, y_pred, target_names=intent_names))\n",
        "\n",
        "        return test_accuracy\n",
        "\n",
        "    # Entity Extraction Section\n",
        "    # Author: Aman Kumar (22SCSE1010701)\n",
        "    def extract_entities(self, text):\n",
        "        \"\"\"Extract entities like order numbers, emails, etc.\"\"\"\n",
        "        entities = {}\n",
        "\n",
        "        # Order number pattern\n",
        "        order_pattern = r'#?ORD\\d{6,10}|\\b\\w{2,4}\\d{6,10}\\b'\n",
        "        order_matches = re.findall(order_pattern, text, re.IGNORECASE)\n",
        "        if order_matches:\n",
        "            entities['order_number'] = order_matches[0]\n",
        "\n",
        "        # Email pattern\n",
        "        email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n",
        "        email_matches = re.findall(email_pattern, text)\n",
        "        if email_matches:\n",
        "            entities['email'] = email_matches[0]\n",
        "\n",
        "        # Phone number pattern\n",
        "        phone_pattern = r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'\n",
        "        phone_matches = re.findall(phone_pattern, text)\n",
        "        if phone_matches:\n",
        "            entities['phone'] = phone_matches[0]\n",
        "\n",
        "        # Amount/price pattern\n",
        "        amount_pattern = r'\\$\\d+\\.?\\d*|\\d+\\.?\\d*\\s?(dollar|usd|€|euro)'\n",
        "        amount_matches = re.findall(amount_pattern, text, re.IGNORECASE)\n",
        "        if amount_matches:\n",
        "            entities['amount'] = amount_matches[0]\n",
        "\n",
        "        return entities\n",
        "\n",
        "    # Sentiment Analysis Section\n",
        "    # Author: Aditya Bajaj (22SCSE1180157)\n",
        "    def analyze_sentiment(self, text):\n",
        "        \"\"\"Analyze sentiment of user message\"\"\"\n",
        "        try:\n",
        "            result = self.sentiment_analyzer(text)[0]\n",
        "            return {\n",
        "                'sentiment': result['label'].lower(),\n",
        "                'confidence': result['score']\n",
        "            }\n",
        "        except:\n",
        "            return {'sentiment': 'neutral', 'confidence': 0.5}\n",
        "\n",
        "    # Response Generation Section\n",
        "    # Author: Aman Kumar (22SCSE1010701)\n",
        "    def generate_response(self, intent, entities, sentiment, user_text):\n",
        "        \"\"\"Generate contextual response based on intent, entities, and sentiment\"\"\"\n",
        "\n",
        "        # Get base response template\n",
        "        if intent in self.response_templates:\n",
        "            base_responses = self.response_templates[intent]\n",
        "            base_response = np.random.choice(base_responses)\n",
        "        else:\n",
        "            base_response = np.random.choice(self.response_templates['general'])\n",
        "\n",
        "        # Customize response based on sentiment\n",
        "        if sentiment['sentiment'] == 'negative' and sentiment['confidence'] > 0.7:\n",
        "            if intent == 'complaint':\n",
        "                base_response = \"I sincerely apologize for the trouble you're experiencing. \" + base_response\n",
        "            else:\n",
        "                base_response = \"I understand your frustration. \" + base_response\n",
        "        elif sentiment['sentiment'] == 'positive':\n",
        "            base_response = \"I'm happy to help! \" + base_response\n",
        "\n",
        "        # Add entity-specific information\n",
        "        if 'order_number' in entities:\n",
        "            base_response += f\" I see you're referring to order {entities['order_number']}.\"\n",
        "\n",
        "        if 'email' in entities:\n",
        "            base_response += f\" I have your email as {entities['email']}.\"\n",
        "\n",
        "        # Add escalation option for negative sentiment\n",
        "        if sentiment['sentiment'] == 'negative' and sentiment['confidence'] > 0.8:\n",
        "            base_response += \" If you'd like, I can connect you with a human representative for further assistance.\"\n",
        "\n",
        "        return base_response\n",
        "\n",
        "    # Intent Prediction Section\n",
        "    # Author: Aditya Bajaj (22SCSE1180157)\n",
        "    def predict_intent(self, text):\n",
        "        \"\"\"Predict intent from user input\"\"\"\n",
        "        if self.intent_classifier is None:\n",
        "            raise ValueError(\"Model not trained yet. Please call train() first.\")\n",
        "\n",
        "        # Preprocess text\n",
        "        processed_text = self.preprocess_text(text)\n",
        "\n",
        "        # Vectorize\n",
        "        text_vectorized = self.vectorizer.transform([processed_text])\n",
        "\n",
        "        # Predict\n",
        "        intent_encoded = self.intent_classifier.predict(text_vectorized)[0]\n",
        "        confidence = self.intent_classifier.predict_proba(text_vectorized)[0].max()\n",
        "\n",
        "        # Decode intent\n",
        "        intent = self.label_encoder.inverse_transform([intent_encoded])[0]\n",
        "\n",
        "        return intent, confidence\n",
        "\n",
        "    # Main Chat Function\n",
        "    # Author: Aman Kumar (22SCSE1010701)\n",
        "    def chat(self, user_input):\n",
        "        \"\"\"Main chat function\"\"\"\n",
        "        try:\n",
        "            # Predict intent\n",
        "            intent, confidence = self.predict_intent(user_input)\n",
        "\n",
        "            # Extract entities\n",
        "            entities = self.extract_entities(user_input)\n",
        "\n",
        "            # Analyze sentiment\n",
        "            sentiment = self.analyze_sentiment(user_input)\n",
        "\n",
        "            # Generate response\n",
        "            response = self.generate_response(intent, entities, sentiment, user_input)\n",
        "\n",
        "            # Return comprehensive response info\n",
        "            return {\n",
        "                'response': response,\n",
        "                'intent': intent,\n",
        "                'confidence': confidence,\n",
        "                'entities': entities,\n",
        "                'sentiment': sentiment\n",
        "            }\n",
        "\n",
        "        except Exception as e:\n",
        "            return {\n",
        "                'response': \"I apologize, but I'm having trouble understanding. Could you please rephrase your question?\",\n",
        "                'intent': 'error',\n",
        "                'confidence': 0.0,\n",
        "                'entities': {},\n",
        "                'sentiment': {'sentiment': 'neutral', 'confidence': 0.5},\n",
        "                'error': str(e)\n",
        "            }\n",
        "\n",
        "    # Model Persistence Section\n",
        "    # Authors: Aditya Bajaj (22SCSE1180157) and Aman Sirohi (22SCSE1012745)\n",
        "    def save_model(self, filename='chatbot_model.pkl'):\n",
        "        \"\"\"Save trained model\"\"\"\n",
        "        model_data = {\n",
        "            'intent_classifier': self.intent_classifier,\n",
        "            'vectorizer': self.vectorizer,\n",
        "            'label_encoder': self.label_encoder,\n",
        "            'response_templates': self.response_templates\n",
        "        }\n",
        "\n",
        "        with open(filename, 'wb') as f:\n",
        "            pickle.dump(model_data, f)\n",
        "\n",
        "        print(f\"Model saved to {filename}\")\n",
        "\n",
        "    def load_model(self, filename='chatbot_model.pkl'):\n",
        "        \"\"\"Load trained model\"\"\"\n",
        "        try:\n",
        "            with open(filename, 'rb') as f:\n",
        "                model_data = pickle.load(f)\n",
        "\n",
        "            self.intent_classifier = model_data['intent_classifier']\n",
        "            self.vectorizer = model_data['vectorizer']\n",
        "            self.label_encoder = model_data['label_encoder']\n",
        "            self.response_templates = model_data['response_templates']\n",
        "\n",
        "            print(f\"Model loaded from {filename}\")\n",
        "            return True\n",
        "        except FileNotFoundError:\n",
        "            print(f\"Model file {filename} not found.\")\n",
        "            return False\n",
        "\n",
        "# Main Application Function\n",
        "# Author: Aman Kumar (22SCSE1010701)\n",
        "def main():\n",
        "    \"\"\"Main function to demonstrate chatbot functionality\"\"\"\n",
        "\n",
        "    print(\"Initializing Customer Service Chatbot...\")\n",
        "    chatbot = CustomerServiceChatbot()\n",
        "\n",
        "    # Try to load existing model, otherwise train new one\n",
        "    if not chatbot.load_model():\n",
        "        print(\"Training new model...\")\n",
        "\n",
        "        # Create and augment training dataset\n",
        "        training_df = chatbot.create_training_dataset()\n",
        "        print(f\"Original dataset size: {len(training_df)}\")\n",
        "\n",
        "        # Augment dataset\n",
        "        augmented_df = chatbot.augment_dataset(training_df, augmentation_factor=5)\n",
        "        print(f\"Augmented dataset size: {len(augmented_df)}\")\n",
        "\n",
        "        # Train model\n",
        "        accuracy = chatbot.train_intent_classifier(augmented_df)\n",
        "        print(f\"Model training completed with accuracy: {accuracy:.4f}\")\n",
        "\n",
        "        # Save model\n",
        "        chatbot.save_model()\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"CUSTOMER SERVICE CHATBOT - Ready to help!\")\n",
        "    print(\"Developed by: Aman Kumar (22SCSE1010701), Aditya Bajaj (22SCSE1180157),\")\n",
        "    print(\"              Adarsh Singh (22SCSE1010088), Aman Sirohi (22SCSE1012745)\")\n",
        "    print(\"Type 'quit' to exit\")\n",
        "    print(\"=\"*60)\n",
        "\n",
        "    # Interactive chat loop\n",
        "    while True:\n",
        "        user_input = input(\"\\nYou: \").strip()\n",
        "\n",
        "        if user_input.lower() in ['quit', 'exit', 'bye']:\n",
        "            print(\"Bot: Thank you for using our customer service! Have a great day!\")\n",
        "            break\n",
        "\n",
        "        if not user_input:\n",
        "            continue\n",
        "\n",
        "        # Get chatbot response\n",
        "        result = chatbot.chat(user_input)\n",
        "\n",
        "        print(f\"Bot: {result['response']}\")\n",
        "\n",
        "        # Display debug information\n",
        "        print(f\"[Debug] Intent: {result['intent']} (confidence: {result['confidence']:.2f})\")\n",
        "        print(f\"[Debug] Sentiment: {result['sentiment']['sentiment']} ({result['sentiment']['confidence']:.2f})\")\n",
        "        if result['entities']:\n",
        "            print(f\"[Debug] Entities: {result['entities']}\")\n",
        "\n",
        "# Batch Testing Function\n",
        "# Author: Aditya Bajaj (22SCSE1180157)\n",
        "def batch_test():\n",
        "    \"\"\"Test chatbot with multiple queries\"\"\"\n",
        "    chatbot = CustomerServiceChatbot()\n",
        "\n",
        "    # Load or train model\n",
        "    if not chatbot.load_model():\n",
        "        training_df = chatbot.create_training_dataset()\n",
        "        augmented_df = chatbot.augment_dataset(training_df, augmentation_factor=3)\n",
        "        chatbot.train_intent_classifier(augmented_df)\n",
        "        chatbot.save_model()\n",
        "\n",
        "    # Test queries\n",
        "    test_queries = [\n",
        "        \"Hi, I need help tracking my order #ORD123456\",\n",
        "        \"I'm very upset about the quality of the product I received\",\n",
        "        \"Can you help me reset my password?\",\n",
        "        \"I was charged twice for the same order\",\n",
        "        \"The website keeps crashing when I try to checkout\",\n",
        "        \"I want to return this defective item\",\n",
        "        \"Good morning, I have a general question\",\n",
        "        \"My billing address is wrong on my account\"\n",
        "    ]\n",
        "\n",
        "    print(\"BATCH TESTING RESULTS:\")\n",
        "    print(\"Developed by: Aman Kumar (22SCSE1010701), Aditya Bajaj (22SCSE1180157),\")\n",
        "    print(\"              Adarsh Singh (22SCSE1010088), Aman Sirohi (22SCSE1012745)\")\n",
        "    print(\"=\"*80)\n",
        "\n",
        "    for query in test_queries:\n",
        "        result = chatbot.chat(query)\n",
        "        print(f\"\\nQuery: {query}\")\n",
        "        print(f\"Response: {result['response']}\")\n",
        "        print(f\"Intent: {result['intent']} (confidence: {result['confidence']:.2f})\")\n",
        "        print(f\"Sentiment: {result['sentiment']['sentiment']}\")\n",
        "        if result['entities']:\n",
        "            print(f\"Entities: {result['entities']}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "# Main Execution Block\n",
        "# Authors: Aman Kumar (22SCSE1010701), Aditya Bajaj (22SCSE1180157),\n",
        "#          Adarsh Singh (22SCSE1010088), and Aman Sirohi (22SCSE1012745)\n",
        "if __name__ == \"__main__\":\n",
        "    # Uncomment the function you want to run\n",
        "    main()  # Interactive chatbot\n",
        "    # batch_test()  # Batch testing"
      ]
    }
  ]
}